#!/usr/bin/env python
import json
import gc
from abc import ABC, abstractmethod

from transformers import AutoModelForCausalLM, AutoTokenizer, BlenderbotTokenizer, BlenderbotForConditionalGeneration
import torch
from bottle import Bottle, request, response

# --- Agents ---
class Agent(ABC):
    def __init__(self, seperator, maxlen, model, tokenizer):
        self.seperator = seperator
        self.maxlen = maxlen
        self.model = model
        self.tokenizer = tokenizer

    @abstractmethod
    def generate(self, text, user, **kwargs):
        raise NotImplemented


class DialoGPTAgent(Agent):
    def __init__(self, name):
        super().__init__(
            seperator="<|endoftext|>",
            maxlen=64,
            model=AutoModelForCausalLM.from_pretrained(name),
            tokenizer=AutoTokenizer.from_pretrained(name),
        )
    
    def generate(self, text, user):
        input_ids = self.tokenizer(
            text=text,
            return_tensors="pt",
        )["input_ids"]

        output_ids = self.model.generate(
            input_ids=input_ids,
            pad_token_id=self.tokenizer.eos_token_id,
            max_length=self.maxlen * 2,
            num_beams=5,
            top_k=None,
            top_p=None,
            no_repeat_ngram_size=4,
            length_penalty=1.35,
            repetition_penalty=2.0,
            use_cache=True,
        )

        return self.tokenizer.decode(output_ids[:, input_ids.shape[-1]:][0], skip_special_tokens=True).strip()


class GPTNeoAgent(Agent):
    def __init__(self, name):
        super().__init__(
            seperator=" ",
            maxlen=256,
            model=AutoModelForCausalLM.from_pretrained(name),
            tokenizer=AutoTokenizer.from_pretrained(name),
        )
    
    def generate(self, text, user):
        input_ids = self.tokenizer(
            text=text,
            max_length=self.maxlen,
            truncation=True,
            return_tensors="pt",
        )

        output_ids = self.model.generate(
            input_ids=input_ids,
            pad_token_id=self.tokenizer.eos_token_id,
            max_length=input_ids.size()[-1] + self.maxlen // 2,
            early_stopping=True,
            num_beams=6,
            num_beam_groups=2,
            top_k=None,
            top_p=None,
            no_repeat_ngram_size=4,
            diverse_penalty=1.5,
            length_penalty=0.7,
            repetition_penalty=2.0,
            use_cache=True,
        )

        reply = self.tokenizer.decode(
            output_ids[:, input_ids.shape[-1]:][0],
            skip_special_tokens=True,
        ).strip()

        for escape in [
            f"{user}:",
            f"{user.upper()}:",
            f"{user.lower()}:",
            "wozey:",
            "WOZEY:",
        ]:
            reply = reply.replace(escape, "\n")
        
        return reply.split("\n")[0].strip()


# --- CHAT HISTORY ---
class ChatHistory:
    def __init__(self):
        self.chat_history = {}

    def add_user(self, uid, text):
        self.chat_history[uid]["user"].append(text)


    def add_bot(self, uid, text):
        self.chat_history[uid]["bot"].append(text)


    def gen_model_input(self, uid, text, agent):
        prefix = self.chat_history[uid]["prefix"]
        if len(prefix) > 0:
            prefix = agent.seperator.join(prefix) + agent.seperator
        else:
            prefix = ""

        text += agent.seperator

        current_tokens = agent.tokenizer(prefix + text)["input_ids"]
        ch_for_current_turn = []
        num_ch_tokens = len(current_tokens)

        for u, m in zip(reversed(self.chat_history[uid]["user"]), reversed(self.chat_history[uid]["bot"])):
            ch = u + agent.seperator + m + agent.seperator
            tokens = agent.tokenizer(ch)["input_ids"]

            num_ch_tokens += len(tokens)
            if num_ch_tokens < agent.maxlen:
                ch_for_current_turn.append(ch)
            else:
                break
    
        ch_for_current_turn = list(reversed(ch_for_current_turn))
        return "".join(ch_for_current_turn) + text

    def reset(self, uid):
        self.chat_history[uid] = {
            "user": [],
            "bot": [],
            "prefix": [],
        }


# --- CONFIG ---
# AGENT = DialoGPTAgent("Lovery/Aqua")
# AGENT = DialoGPTAgent("microsoft/DialoGPT-small")
# AGENT = DialoGPTAgent("microsoft/DialoGPT-medium")
# AGENT = DialoGPTAgent("microsoft/DialoGPT-large")
# AGENT = DialoGPTAgent("abhiramtirumala/DialoGPT-sarcastic")
# AGENT = DialoGPTAgent("Kryptone/monikAI")
# AGENT = DialoGPTAgent("Kryptone/monikAI-Unstable")
# AGENT = DialoGPTAgent("luca-martial/DialoGPT-Elon")
AGENT = DialoGPTAgent("S34NtheGuy/DialoGPT-medium-Glass_Of_Water")
# AGENT = DialoGPTAgent("transfaeries/DialoGPT-medium-Discord-1.0")
# AGENT = GPTNeoAgent("EleutherAI/gpt-neo-350M")

# --- MAIN ---
# initialize bottle web framework
app = Bottle()

# initialize chat history
chat_history = ChatHistory()

# chat route
@app.route("/chat", method="POST")
def do_chat():
    # cleanup request data
    uid = request.json["id"]
    user = request.json["user"]
    uin = request.json["text"].strip()
    print(f"[{uid}]: {uin}")

    # sanity fixes
    if uid not in chat_history.chat_history:
        chat_history.reset(uid)

    # generate input for model
    model_input = chat_history.gen_model_input(uid, uin, AGENT)
    chat_history.add_user(uid, uin)

    # generate output from model
    reply = AGENT.generate(model_input, user)
    chat_history.add_bot(uid, reply)
    print(f"[wozey]: {reply}")

    gc.collect()

    # send back
    return json.dumps({ "reply": reply })


# reset chat history route
@app.route("/reset", method="POST")
def do_reset():
    print(f"Reset history for: {request.json['id']}")

    chat_history.reset(request.json["id"])

    return


# CORS Header
@app.route('/<:re:.*>', method='OPTIONS')
def cors():
    pass


headers = ['Origin', 'Accept', 'Content-Type',
           'X-Requested-With', 'X-CSRF-Token',
           'Authorization']
HEADERS = ', '.join((headers + [h.lower() for h in headers]))


def apply_cors():
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'POST'
    response.headers['Access-Control-Allow-Headers'] = HEADERS


app.add_hook('after_request', apply_cors)
app.run(host="::", port=6769)